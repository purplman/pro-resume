// Define mixins here

// Reset list element

@mixin reset-list {
    margin: 0;
    padding: 0;
    list-style: none;
}

// Push to center

@mixin push--auto {
    margin: {
        left: auto;
        right: auto;
    }
}

// Use with ::before and ::after

@mixin pseudo(
    $width: 100%,
    $height: 100%,
    $display: block,
    $pos: absolute,
    $content: ""
) {
    content: $content;
    display: $display;
    position: $pos;
    width: $width;
    height: $height;
}

// Creates a square

@mixin square($size, $radius: 0) {
    width: $size;
    height: $size;

    @if $radius != 0 {
        border-radius: $radius;
    }
}

@mixin margin-x($x) {
    margin-right: $x;
    margin-left: $x;
}
@mixin margin-y($y) {
    margin-top: $y;
    margin-bottom: $y;
}

@mixin padding-x($x) {
    padding-right: $x;
    padding-left: $x;
}
@mixin padding-y($y) {
    padding-top: $y;
    padding-bottom: $y;
}

// Creates a triangle

@mixin css-triangle(
    $color,
    $direction,
    $size: 6px,
    $position: absolute,
    $round: false
) {
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round($size / 2.5);
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round($size / 2.5);
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

// Flexbox toolkit

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-center-column {
    @include flex-center;
    flex-direction: column;
}

@mixin flex-center-vert {
    display: flex;
    align-items: center;
}

@mixin flex-center-horiz {
    display: flex;
    justify-content: center;
}

@mixin flex-between {
    display: flex;
    justify-content: space-between;
}

// Cover Background

@mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

// Media queries

@mixin mobile {
    @media only screen and (min-width: $mobile * 1px) {
        @content;
    }
}

@mixin tablet {
    @media only screen and (min-width: $tablet * 1px) {
        @content;
    }
}

@mixin large {
    @media only screen and (min-width: $large * 1px) {
        @content;
    }
}

@mixin desktop {
    @media only screen and (min-width: $desktop * 1px) {
        @content;
    }
}

// Fading element

@mixin fade($type, $dur) {
    @if $type== "hide" {
        visibility: hidden;
        opacity: 0;
        transition: $dur;
    } @else if $type== "show" {
        visibility: visible;
        opacity: 1;
        transition: $dur;
    }
}
